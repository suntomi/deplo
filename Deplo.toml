version = 1
# ---------------
# common settings
# ---------------
project_name = "deplo"
# debug = { ghaction_deplo_debugger = "on", ghaction_job_debugger = "on" }
checkout = { submodules = true, token = "${SUNTOMI_VCS_ACCOUNT_KEY}" }

# release target branch settings
[release_targets]
# main branch will be released as nightly
nightly = { patterns = ["main"] }
# branch which name is 'lab' will be released as lab
lab = { patterns = ["lab"] }
# tag which name is started with numerals treated as release (eg. 0.1.10)
prod = { tag = true, patterns = ["[0-9]*"] }


# ------------
# secret settings
# ------------
[secrets]
SUNTOMI_VCS_ACCOUNT = { env = "SUNTOMI_VCS_ACCOUNT" }
SUNTOMI_VCS_ACCOUNT_EMAIL = { env = "SUNTOMI_VCS_ACCOUNT_EMAIL" }
SUNTOMI_VCS_ACCOUNT_KEY = { env = "SUNTOMI_VCS_ACCOUNT_KEY" }
SUNTOMI_VCS_APP_ID = { env = "SUNTOMI_VCS_APP_ID" }
SUNTOMI_VCS_APP_PKEY = { path = "./.secrets/ghapp.pem" }


# ------------
# vcs settings
# ------------
# version control system account settings
[vcs]
type = "github"
email = "${SUNTOMI_VCS_ACCOUNT_EMAIL}"
account = "${SUNTOMI_VCS_ACCOUNT}"
key = "${SUNTOMI_VCS_ACCOUNT_KEY}"


# ------------
# ci settings
# ------------
[ci.default]
# ci account setting, mutiple ci service can be used by creating mutiple [ci.accounts.$name] sections.
# [ci.default] should always be set.
type = "ghaction"
account = "${SUNTOMI_VCS_ACCOUNT}"
key = "${SUNTOMI_VCS_ACCOUNT_KEY}"

[ci.gh_app]
type = "ghaction"
account = "${SUNTOMI_VCS_APP_ID}"
key = "${SUNTOMI_VCS_APP_PKEY}"


# ------------
# workflow settings
# ------------
[workflows]
# workflow is defined event that triggers it. 
# you can define workflow here, by specifying $workflow_name = $event_source.
# by default, following 2 workflows are implicitly defined
# 1. integrate workflow. which is triggered when a pull request against release target branch, is opened or update 
# 2. deploy workflow. which is trigger when release target is created or updated
# you can add new builtin workflow like repository event (eg. issue opened), cron job, etc. 
# or using 3rd party module to receive event from another system (planed at 0.6.0)

# cron workflow from cron event source.
cron = { schedules = { daily = "30 0 * * *", monthly = "30 0 1 * *" } }
# repository workflow from repository event source.
repository = { 
    events = { 
        issue_change = ["issues.opened", "issues.closed"],
        milestone_change = ["milestone.created", "milestone.opened", "milestone.closed"],
        wiki_edit = ["gollum"]
    }
}
webapi_dispatch = {
    manual = false,
    inputs = {
        foo = { type = "number", required = true },
        piyo = {
            schema = [
                { type = "number" },
                { type = "list", schema = { type = "string" }}
            ]
        },
        fuga = {
            schema = {
                foo = { type = "bool" },
                bar = { schema = { baz = { type = "string" } } }
            }
        }
    }
}
manual_dispatch = {
    manual = true,
    inputs = {
        target = { 
            required = true
            default = "dev"
            options = [
                "stage",
                "dev",
                "prod",
                "qa",
                "review"
            ]
        }
    }    
}
slack = {
    # uses = "suntomi/slack@0.1.0",
    uses = { path = "./tools/modules/slack" },
    release_taget = "nightly",
    with = {
        webhook = "https://hooks.slack.com/services/T0J5QJQ0P/B0J5QJQ0P/X0J5QJQ0P",
        channel = "#suntomi",
        username = "suntomi",
        icon_url = "https://avatars.slack-edge.com/2018-09-18/5b9b8f8f9d8f8a3f7f8b8b8f-192.png"
    }
}
discord = {
    # uses = "suntomi/discord@0.1.0",
    uses = { path = "./tools/modules/discord" },
    release_taget = "nightly",
    with = {
        key = "${SUNTOMI_DISCORD_KEY}",
    }
}


# ------------
# job settings
# ------------
[jobs.base]
# git's changeset pattern to invoke the job. that is, integrate.base only invoked when tools/docker/Dockerfile.base is
# changed by commit.
on = { workflows = ["deploy"], changed = ["tools/docker/Dockerfile.base"] }
# you can set local_fallback container image. if its set, command will be executed on container of `local_fallback.image`,
# with using shell `local_fallback.shell`, if local machine's OS does not matched runner.os.
runner = { os = "linux", local_fallback = { image = "docker:25.0.1", shell = "sh" } }
command = """
set -e
docker buildx create --name mp --bootstrap --use
push_opt=""
if [ "${DEPLO_CI_WORKFLOW_NAME}" = "deploy" ]; then
    echo ${SUNTOMI_VCS_ACCOUNT_KEY} | docker login ghcr.io -u ${SUNTOMI_VCS_ACCOUNT} --password-stdin
    push_opt="--push"
fi
docker buildx build ${push_opt} --platform linux/amd64,linux/arm64 -t ghcr.io/suntomi/deplo:base -f tools/docker/Dockerfile.base tools/docker
"""

[jobs.builder]
# if workflows is opmitted, use ["deploy", "integrate"] by default.
on = { workflows = ["deploy"], changed = ["tools/docker/Dockerfile.builder", "Cargo.*"] }
runner = { os = "linux", local_fallback = { image = "docker:25.0.1", shell = "sh" } }
command = """
set -e
sh tools/scripts/copy_manifests.sh
docker buildx create --name mp --bootstrap --use
push_opt=""
if [ "${DEPLO_CI_WORKFLOW_NAME}" = "deploy" ]; then
    echo ${SUNTOMI_VCS_ACCOUNT_KEY} | docker login ghcr.io -u ${SUNTOMI_VCS_ACCOUNT} --password-stdin
    push_opt="--push"
fi
docker buildx build ${push_opt} --platform linux/amd64,linux/arm64 -t ghcr.io/suntomi/deplo:builder -f tools/docker/Dockerfile.builder tools/docker
"""
# tasks. task is a pre-defined command to be executed in same environment as job.
# you can use tasks to use deplo like repository of utility command, like make or rake.
tasks = {
    long_running = """
for i in `seq 1 ${COUNT:-10}`; do
    echo $i
    sleep 1
done
""",
    test = "sh ./tools/scripts/longrun.sh 5"
}

[jobs.test]
on = [
    { workflows = ["integrate"], changed = ["*/src/*", "Cargo.*"] },
    { workflows = ["cron"], schedules = ["daily"] },
    { workflows = ["repository"], events = ["intentionally_specify_invalid_event"] },
    { workflows = ["slack"], when = { message_matches = ['.*test\sit.*'] } }
]
runner = {
    os = "linux", local_fallback = {
        image = "ghcr.io/suntomi/deplo:builder",
        inputs = ["core", "cli", "Cargo.*", "tools/scripts"],
        caches = ["/tmp/target"],
        shell = "sh"
    }
}
options = {
    # keys in native_configs are directly added to generated job declaration in workflow file
    native_configs = {
        permissions = { "id-token" = "write", "contents" = "read" }
    }
}
env = { TEST_ID_TOKEN_REQUEST_URL = "${env:ACTIONS_ID_TOKEN_REQUEST_URL}", TEST_ID_TOKEN_REQUEST_TOKEN = "${env:ACTIONS_ID_TOKEN_REQUEST_TOKEN}" }
command = "sh tools/scripts/test.sh"
tasks = { test = "cargo test", home = "echo ${HOME}" }
# cache settings. file paths that is listed in paths will be preserved with tha key `keys[0]`.
# if you specify multiple keys, `keys[1..]` are used as fallback keys to search similar caches 
# that is craeted by other branches.
caches = {
    # one table entry defines a set of cache operation
    cargo = {
        # way to use variable like ${{ runner.os }} in the keys, is CI service specific. please consult each CI service's document for detail.
        keys = ["integrate-build-${{ runner.os }}-v1-${{ hashFiles('**/Cargo.lock') }}"], # each os and Cargo.lock definition
        # paths root are also CI specific
        paths = ["target", "~/.cargo/bin", "~/.cargo/registry/cache", "~/.cargo/registry/index", "~/.cargo/git/db"] # all possible cargo cache paths
    }, # last comma also valid
}

[jobs.config]
on = { workflows = ["integrate"], changed = ["Deplo.toml"] }
# local_fallback can be path to docker file. if you specify docker file path, deplo automatically build corresponding image
# and use it as local fallback container image.
runner = { os = "linux", local_fallback = { path = "tools/docker/Dockerfile.vmfb", shell = "sh" } }
command = "deplo init"
# commit settings. if path of files that changed after the job finish running are matched patterns in 'files', 
# deplo push or made pull request such a changes to repoisitory after all jobs finish running, in 'Cleanup CI' job.
commit = [
    { files = [".github/*"], with = "push" },
    { files = [".github/*"], on = { release_targets = ["prod"] }, with = "pull_request" },
    { files = ["docs/*"], on = { release_targets = ["lab"] }, with = "push" }
]

[jobs.product]
on = { workflows = ["deploy"], changed = ["*/src/*", "Cargo.*"] }
# job dependencies. deploy.product only starts to run after deploy.builder finished.
depends = ["builder"]
runner = { os = "linux", local_fallback = { path = "tools/docker/Dockerfile.vmfb", shell = "sh" } }
command = """
set -e
mkdir -p tools/docker/bin
. tools/scripts/setup_release_env.sh
sh tools/scripts/build_linux.sh

# deplo provides unified command for controlling vcs. 
# `deplo vcs release` and `deplo vcs release-assets` are used for creating release of vcs like github/gitlab
# with unified interface.
arch=$(uname -m)
deplo_bin=tools/docker/bin/${arch}/cli
${deplo_bin} vcs release ${DEPLO_RELEASE_TAG} -o name=${DEPLO_RELEASE_NAME}
${deplo_bin} vcs release-assets ${DEPLO_RELEASE_TAG} tools/docker/bin/x86_64/cli --replace -o name=deplo-Linux-x86_64
${deplo_bin} vcs release-assets ${DEPLO_RELEASE_TAG} tools/docker/bin/aarch64/cli --replace -o name=deplo-Linux-aarch64

# deplo provides dyanamically generated job output. you can use value for 'foo' and 'fuga' in jobs that depends on the job. 
${deplo_bin} job set-output foo bar
${deplo_bin} job set-output fuga hoge

# job output can be used in the job that originally create output.
if [ $(${deplo_bin} job output product foo) != "bar" ]; then
    echo "failed to get output from job 'product' locally"
    exit 1
fi
"""
tasks = {
    build = """
set -e
mkdir -p tools/docker/bin
. tools/scripts/setup_release_env.sh
sh tools/scripts/build_linux.sh
cp tools/docker/bin/cli .deplo/cli/${DEPLO_RELEASE_NAME}/Linux/deplo 
"""
}

[jobs.latest]
# latest tag of docker image is only updated when production release is created.
on = { workflows = ["deploy"], release_targets = ["prod"], changed = ["*/src/*", "Cargo.*"] }
# prohibit to run from cli
options = { only_from_ci = true }
depends = ["product"]
runner = { os = "linux", local_fallback = { image = "docker:25.0.1", shell = "sh" } }
command = """
. tools/scripts/setup_release_env.sh
echo ${SUNTOMI_VCS_ACCOUNT_KEY} | docker login ghcr.io -u ${SUNTOMI_VCS_ACCOUNT} --password-stdin
docker pull ghcr.io/suntomi/deplo:${DEPLO_RELEASE_VERSION}
docker tag ghcr.io/suntomi/deplo:${DEPLO_RELEASE_VERSION} ghcr.io/suntomi/deplo:latest
docker push ghcr.io/suntomi/deplo:latest
"""

[jobs.mac]
on = { workflows = ["deploy"], changed = ["*/src/*", "Cargo.*"] }
depends = ["product"]
runner = { os = "macos" }
steps = [{
    name = "before test"
    env = { HOGE = "hoge" },
    workdir = "docs",
    shell = "sh",
    command = """
    if [ "$(echo $HOGE)" != "hoge" ]; then
        echo "env does not work"
        exit 1
    fi
    if [ -z "$(ls -al ./envs.md)" ]; then
        ls -al
        echo "workdir does not work"
        exit 1
    fi
    if [ "$(echo $0)" != "sh" ]; then
        echo "shell does not work"
        exit 1
    fi
    """
}, {
    command = """
    set -e
    . tools/scripts/setup_release_env.sh
    cargo build --release
    deplo vcs release-assets ${DEPLO_RELEASE_TAG} target/release/cli --replace -o name=deplo-Darwin
    # deploy-mac depends on deploy-product, so can use its output
    if [ "$(deplo job output product foo)" != "bar" ]; then
        echo "failed to get output from job 'product'"
        exit 1
    fi
    """
}, {
    name = "after test"
    env = { FUGA = "fuga" },
    shell = "bash",
    workdir = ".vscode",
    command = """
    if [ "$(echo $FUGA)" != "fuga" ]; then
        echo "env does not work"
        exit 1
    fi
    if [ -z "$(ls -al launch.json)" ]; then
        ls -al
        echo "workdir does not work"
        exit 1
    fi
    if [ "$(echo $0)" != "bash" ]; then
        echo "shell does not work"
        exit 1
    fi
    """,
}]
tasks = {
    test = "echo \"[${AWS_ACCESS_KEY}]\""
}
caches.cargo = {
    keys = [
        "deploy-build-${{ runner.os }}-v1-${{ hashFiles('**/Cargo.lock') }}",
        "deploy-build-${{ runner.os }}-v1-"
    ],
    paths = ["target", "~/.cargo/bin", "~/.cargo/registry/cache", "~/.cargo/registry/index", "~/.cargo/git/db"]
}

[jobs.win]
on = { workflows = ["deploy"], changed = [".*/src/.*", 'Cargo\.*'], diff_matcher = "regex" }
depends = ["product"]
runner = { os = "windows" }
command = """
set -eo pipefail
. tools/scripts/setup_release_env.sh
cargo build --release
deplo vcs release-assets ${DEPLO_RELEASE_TAG} target/release/cli.exe --replace -o name=deplo-Windows.exe
deplo vcs release-assets ${DEPLO_RELEASE_TAG} target/release/cli.pdb --replace -o name=deplo-Windows.pdb
# job 'win' depends on job 'product', so can use its output
if [ $(deplo job output product fuga) != "hoge" ]; then
    echo "failed to get output from job 'product'"
    exit 1
fi
"""
caches = {
    cargo = {
        keys = [
            "deploy-build-${{ runner.os }}-v1-${{ hashFiles('**/Cargo.lock') }}",
            "deploy-build-${{ runner.os }}-v1-"
        ],
        paths = ["target", "~/.cargo/bin", "~/.cargo/registry/cache", "~/.cargo/registry/index", "~/.cargo/git/db"]
    }
}

[jobs.dispatched]
on = { workflows = ["manual_dispatch", "webapi_dispatch"] }
runner = { os = "linux", local_fallback = { image = "ghcr.io/suntomi/images:aws", shell = "sh" } }
command = """
set -e
echo "======================="
echo "dispatch context = ${DEPLO_CI_WORKFLOW_CONTEXT}"
echo "======================="
"""

[jobs.repository]
on = { workflows = ["repository"] }
runner = { os = "linux", local_fallback = { path = "tools/docker/Dockerfile.vmfb", shell = "sh" } }
command = """
echo "======================="
echo "repository context = ${DEPLO_CI_WORKFLOW_CONTEXT}"
echo "======================="
"""

[jobs.module_test]
on = { workflows = ["integrate"] }
runner = { os = "linux", local_fallback = { path = "tools/docker/Dockerfile.vmfb", shell = "sh" } }
steps = [{
    uses = { path = "./tools/modules/sample" }
}]
